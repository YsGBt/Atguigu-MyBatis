<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">

  <!-- int insertEmployeeBatchByList(@Param("emps") List<Employee> employeeList); -->
  <insert id="insertEmployeeBatchByList">
    insert into t_employee values
    <foreach collection="emps" item="emp" separator=",">
      (null, #{emp.employeeName}, #{emp.age}, #{emp.gender}, #{emp.email}, null)
    </foreach>
  </insert>

  <!-- int deleteEmployeeBatchByArray(@Param("eids") Integer[] eids); -->
  <delete id="deleteEmployeeBatchByArray">
    delete from t_employee where
    <foreach collection="eids" item="eid" separator="or">
      eid = #{eid}
    </foreach>
  </delete>

  <delete id="deleteEmployeeBatchByArrayUsingIn">
    delete from t_employee where eid in
    <foreach collection="eids" item="eid" separator="," open="(" close=")">
      #{eid}
    </foreach>
  </delete>

  
  <sql id="employeeColumns">eid,employee_name,age,sex,email</sql>
  <!-- List<Employee> getEmployeeByChoose(@Param("employee") Employee employee); -->
  <select id="getEmployeeByChoose" resultType="Employee">
    select <include refid="employeeColumns"></include> from t_employee
    <where>
      <choose>
        <when test="employee.employeeName != null and employee.employeeName != ''">
          employee_name = #{employee.employeeName}
        </when>
        <when test="employee.age != null and employee.age != ''">
          age = #{employee.age}
        </when>
        <when test="employee.gender != null and employee.gender != ''">
          gender = #{employee.gender}
        </when>
        <when test="employee.email != null and employee.email != ''">
          email = #{employee.email}
        </when>
        <otherwise>
          did = 1
        </otherwise>
      </choose>
    </where>
  </select>

  <!-- List<Employee> getEmployeeByCondition(@Param("employee") Employee employee); -->
  <select id="getEmployeeByCondition" resultType="Employee">
    select * from t_employee
    <trim prefix="where" suffixOverrides="and|or">
      <if test="employee.employeeName != null and employee.employeeName != ''">
        employee_name = #{employee.employeeName} and
      </if>
      <if test="employee.age != null and employee.age != ''">
        age = #{employee.age} and
      </if>
      <if test="employee.gender != null and employee.gender != ''">
        gender = #{employee.gender} or
      </if>
      <if test="employee.email != null and employee.email != ''">
        email = #{employee.email}
      </if>
    </trim>
  </select>

  <select id="getEmployeeByConditionUsingWhere" resultType="Employee">
    select * from t_employee
    <where>
      <if test="employee.employeeName != null and employee.employeeName != ''">
        employee_name = #{employee.employeeName}
      </if>
      <if test="employee.age != null and employee.age != ''">
        and age = #{employee.age}
      </if>
      <if test="employee.gender != null and employee.gender != ''">
        and gender = #{employee.gender}
      </if>
      <if test="employee.email != null and employee.email != ''">
        and email = #{employee.email}
      </if>
    </where>
  </select>

  <select id="getEmployeeByConditionUsingIf" resultType="Employee">
    select * from t_employee where 1=1
    <if test="employee.employeeName != null and employee.employeeName != ''">
      and employee_name = #{employee.employeeName}
    </if>
    <if test="employee.age != null and employee.age != ''">
      and age = #{employee.age}
    </if>
    <if test="employee.gender != null and employee.gender != ''">
      and gender = #{employee.gender}
    </if>
    <if test="employee.email != null and employee.email != ''">
      and email = #{employee.email}
    </if>
  </select>
</mapper>